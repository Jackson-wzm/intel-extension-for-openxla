/* Copyright (c) 2023 Intel Corporation

Copyright 2023 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

#ifndef XLA_SERVICE_GPU_FUSED_MHA_THUNK_H_
#define XLA_SERVICE_GPU_FUSED_MHA_THUNK_H_

#include <optional>

#include "absl/container/flat_hash_map.h"
#include "tsl/platform/status.h"
#include "xla/hlo/ir/hlo_instruction.h"
#include "xla/hlo/ir/hlo_instructions.h"
#include "xla/service/buffer_assignment.h"
#include "xla/service/gpu/buffer_allocations.h"
#include "xla/service/gpu/gpu_executable.h"
#include "xla/service/gpu/gpu_fused_mha_runner.h"
#include "xla/service/gpu/thunk.h"
#include "xla/stream_executor/stream_executor.h"
#include "xla/types.h"
#include "xla/xla_data.pb.h"

namespace xla {
namespace gpu {

// This class stores everything that StreamExecutor needs to launch a DNN
// fMHA. It is generated by IrEmitter.
//
// This is thread-compatible.

class FusedMHAThunk : public Thunk {
 public:
  // Constructs a thunk for launching a DNN FMHA.
  FusedMHAThunk(ThunkInfo thunk_info, GpufMHAConfig config,
                BufferAllocation::Slice lhs_bmm1_slice,
                BufferAllocation::Slice rhs_bmm1_slice,
                BufferAllocation::Slice rhs_bmm2_slice,
                BufferAllocation::Slice output_slice,
                BufferAllocation::Slice scratch_slice,
                BufferAllocation::Slice mask_slice,
                BufferAllocation::Slice bias_slice);

  FusedMHAThunk(const FusedMHAThunk&) = delete;
  FusedMHAThunk& operator=(const FusedMHAThunk&) = delete;

  Status ExecuteOnStream(const ExecuteParams& params) override;

 private:
  BufferAllocation::Slice lhs_bmm1_buffer_;
  BufferAllocation::Slice rhs_bmm1_buffer_;
  BufferAllocation::Slice rhs_bmm2_buffer_;
  BufferAllocation::Slice output_buffer_;
  BufferAllocation::Slice scratch_buffer_;
  BufferAllocation::Slice mask_buffer_;
  BufferAllocation::Slice bias_buffer_;

  // FusedMHA config
  const GpufMHAConfig config_;
};

}  // namespace gpu
}  // namespace xla
#endif  // XLA_SERVICE_GPU_FUSED_MHA_THUNK_H_